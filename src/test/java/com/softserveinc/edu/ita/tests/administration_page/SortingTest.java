package com.softserveinc.edu.ita.tests.administration_page;import com.softserveinc.edu.ita.enums.administration_page.UsersTableColumns;import com.softserveinc.edu.ita.pageobjects.AdministrationPage;import com.softserveinc.edu.ita.pageobjects.HomePage;import com.softserveinc.edu.ita.pageobjects.UserInfoPage;import com.softserveinc.edu.ita.tests.TestRunner;import com.softserveinc.edu.ita.utils.AdministrationsTableRow;import com.softserveinc.edu.ita.utils.DataProviders;import org.testng.annotations.Test;import java.util.*;import java.util.function.Function;/** * This class is used to test sorting actions in 'Administration' table of 'Administration' page. */public class SortingTest extends TestRunner {    @Test(dataProviderClass = DataProviders.class, dataProvider = "getUsersTableColumns")    public void testSorting(UsersTableColumns column) {        final HomePage homePage = new HomePage(driver);        final UserInfoPage userInfoPage = homePage.logIn("iva", "qwerty");        final AdministrationPage administrationPage = userInfoPage.clickAdministrationTab();        final List<AdministrationsTableRow> baseTableFromView = administrationPage.getTableFromView();        administrationPage.clickAdministrationTableColumn(column);        final List<AdministrationsTableRow> tableFromViewSortedAsc = administrationPage.getTableFromView();        administrationPage.clickAdministrationTableColumn(column);        final List<AdministrationsTableRow> tableFromViewSortedDesc = administrationPage.getTableFromView();        loggingSoftAssert.assertTrue(isTableIntact(baseTableFromView, tableFromViewSortedAsc),                String.format("Table isn't broken after ascendant sorting by '%s'.", column));        loggingSoftAssert.assertTrue(isTableIntact(baseTableFromView, tableFromViewSortedDesc),                String.format("Table's isn't broken after descendant sorting by '%s'.", column));        sortBaseTableBy(baseTableFromView, column);        loggingSoftAssert.assertTrue(isTablesEqualsByColumn(baseTableFromView, tableFromViewSortedAsc, column),                String.format("Ascendant sorting by '%s' is working.", column));        Collections.reverse(baseTableFromView);        loggingSoftAssert.assertTrue(isTablesEqualsByColumn(baseTableFromView, tableFromViewSortedDesc, column),                String.format("Descendant sorting by '%s' is working.", column));        administrationPage.clickLogOutButton();        loggingSoftAssert.assertAll();    }    /**     * Interface with method used in method "isTablesEqualsByColumn".     */    private interface ComparisonCondition {        String callMethod(AdministrationsTableRow method);    }    /**     * A method to verify equality of tables by given column.     */    public boolean isTablesEqualsByColumn(List<AdministrationsTableRow> sortedBaseTableFromView, List<AdministrationsTableRow> sortedTableByView, UsersTableColumns column) {        Map<UsersTableColumns, ComparisonCondition> sortConditionsMap = new HashMap<>();        sortConditionsMap.put(UsersTableColumns.FIRST_NAME, AdministrationsTableRow::getFirstName);        sortConditionsMap.put(UsersTableColumns.LAST_NAME, AdministrationsTableRow::getLastName);        sortConditionsMap.put(UsersTableColumns.LOGIN, AdministrationsTableRow::getLogin);        sortConditionsMap.put(UsersTableColumns.ROLE, AdministrationsTableRow::getRole);        sortConditionsMap.put(UsersTableColumns.REGION, AdministrationsTableRow::getRegion);        Iterator baseTableIterator = sortedBaseTableFromView.iterator();        Iterator tableIterator = sortedTableByView.iterator();        int equalsCells = 0;        while (baseTableIterator.hasNext() && sortConditionsMap.get(column).callMethod((AdministrationsTableRow) baseTableIterator.next())                .equals(sortConditionsMap.get(column).callMethod((AdministrationsTableRow) tableIterator.next()))) {            equalsCells++;        }        return (equalsCells == sortedBaseTableFromView.size());    }    /**     * A method to sort base table by given column through comparator.     */    public void sortBaseTableBy(List<AdministrationsTableRow> baseTableFromView, UsersTableColumns column) {        Map<UsersTableColumns, Function<AdministrationsTableRow, String>> sortConditionsMap = new HashMap<>();        sortConditionsMap.put(UsersTableColumns.FIRST_NAME, AdministrationsTableRow::getFirstName);        sortConditionsMap.put(UsersTableColumns.LAST_NAME, AdministrationsTableRow::getLastName);        sortConditionsMap.put(UsersTableColumns.LOGIN, AdministrationsTableRow::getLogin);        sortConditionsMap.put(UsersTableColumns.ROLE, AdministrationsTableRow::getRole);        sortConditionsMap.put(UsersTableColumns.REGION, AdministrationsTableRow::getRegion);        baseTableFromView.sort(Comparator.comparing(sortConditionsMap.get(column)));    }    /**     * A method to verify integrity of table after sorting. The method says "All of the rows are(true)/aren't(false) intact after sorting".     */    public boolean isTableIntact(List<AdministrationsTableRow> baseTable, List<AdministrationsTableRow> tableAfterSorting) {        int intactRows = 0;        Iterator tableIterator = tableAfterSorting.iterator();        while (tableIterator.hasNext() && baseTable.toString().contains(tableIterator.next().toString())) {            intactRows++;        }        return (intactRows == tableAfterSorting.size());    }}